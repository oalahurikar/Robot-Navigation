# ðŸ¤– ROBOT NAVIGATION NEURAL NETWORK CONFIGURATION
# ================================================
# 
# This configuration file defines all hyperparameters and settings
# for the neural network used in robot navigation.

# =============================================================================
# NEURAL NETWORK ARCHITECTURE
# =============================================================================

# Model Architecture
model:
  # Goal-aware input size
  # Goal-aware mode: 9 perception + 2 goal_delta = 11 features
  # Basic mode: 9 perception = 9 features
  input_size: 11             # Will be auto-calculated based on goal_aware setting
  perception_size: 9         # 3Ã—3 perception grid
  goal_features: 2           # goal_delta (dx, dy) features
  hidden1_size: 128          # First hidden layer neurons
  hidden2_size: 64           # Second hidden layer neurons  
  output_size: 4             # 4 navigation actions (UP, DOWN, LEFT, RIGHT)
  
  # Activation functions
  hidden_activation: "relu"  # ReLU for hidden layers
  output_activation: "softmax"  # Softmax for output layer
  
  # Regularization
  dropout_rate: 0.15          # Dropout rate for regularization
  weight_decay: 0.001         # L2 regularization (not used in this implementation)

# =============================================================================
# TRAINING HYPERPARAMETERS
# =============================================================================

training:
  # Optimization
  learning_rate: 0.0005       # Initial learning rate
  batch_size: 64             # Mini-batch size
  epochs: 300                # Maximum number of epochs
  
  # Early stopping
  early_stopping:
    enabled: true
    patience: 55             # Epochs to wait before stopping
    monitor: "val_loss"      # Metric to monitor
    min_delta: 0.0001         # Minimum change to qualify as improvement
  
  # Learning rate scheduling (future enhancement)
  lr_scheduler:
    enabled: true
    type: "cosine"             # "step", "exponential", "cosine"
    step_size: 15
    gamma: 0.5

# =============================================================================
# DATA SPLITTING
# =============================================================================

data:
  # Split ratios
  train_ratio: 0.8           # 80% for training
  val_ratio: 0.1             # 10% for validation
  test_ratio: 0.1            # 10% for testing
  
  # Data preprocessing
  normalize: false           # No normalization needed (binary 0/1 values)
  shuffle: true              # Shuffle data before splitting
  random_seed: 42            # For reproducible splits

# =============================================================================
# MODEL PERSISTENCE
# =============================================================================

model_save:
  # File paths
  model_dir: "data/models/final_models"
  model_filename: "robot_navigation_nn.pkl"
  history_filename: "training_history.png"
  
  # Save options
  save_best_only: true       # Save only the best model (based on validation loss)
  save_weights_only: false   # Save full model (weights + architecture)
  save_history: true         # Save training history plots

# =============================================================================
# EVALUATION METRICS
# =============================================================================

evaluation:
  # Metrics to compute
  metrics:
    - "accuracy"             # Classification accuracy
    - "loss"                 # Cross-entropy loss
    - "confusion_matrix"     # Confusion matrix
    - "classification_report"  # Detailed classification report
  
  # Action mapping
  action_names:
    - "UP"                   # Action 0
    - "DOWN"                 # Action 1  
    - "LEFT"                 # Action 2
    - "RIGHT"                # Action 3

# =============================================================================
# VISUALIZATION SETTINGS
# =============================================================================

visualization:
  # Training plots
  plot_training_history: true
  plot_confusion_matrix: true
  plot_architecture: true
  
  # Plot settings
  figure_size: [12, 5]       # Width, height in inches
  dpi: 300                   # Resolution for saved plots
  style: "seaborn-v0_8"      # Matplotlib style
  
  # Colors
  colors:
    train: "blue"
    validation: "red"
    test: "green"

# =============================================================================
# LOGGING AND MONITORING
# =============================================================================

logging:
  # Logging level
  level: "INFO"              # DEBUG, INFO, WARNING, ERROR
  
  # Log files
  log_dir: "data/results/logs"
  log_filename: "training.log"
  
  # Console output
  print_every_n_epochs: 10   # Print progress every N epochs
  verbose: true              # Detailed output during training

# =============================================================================
# EXPERIMENTAL SETTINGS
# =============================================================================

experiments:
  # Future experimental features can be added here
  enabled: false


# =============================================================================
# PERCEPTION MODE CONFIGURATIONS
# =============================================================================

perception_modes:
  # Goal-Aware Mode (Default)
  "goal_aware":
    perception_size: 9
    goal_features: 2
    input_size: 11          # 9 perception + 2 goal_delta
    description: "3Ã—3 perception with goal direction awareness"
    expected_accuracy: "80-85%"
    
  # Basic Mode  
  "basic":
    perception_size: 9
    goal_features: 0
    input_size: 9           # 9 perception only
    description: "3Ã—3 perception without goal awareness"
    expected_accuracy: "70-75%"

# =============================================================================
# USAGE INSTRUCTIONS
# =============================================================================

usage_notes: |
  ðŸš€ HOW TO USE DIFFERENT MODES:
  
  1. For Goal-Aware Mode (Default):
     - Use as-is: perception_size: 9, goal_features: 2, input_size: 11
     - Generate data: python scripts/generate_data.py large
     - Train: python scripts/train_nn.py
     
  2. For Basic Mode:
     - Update: goal_features: 0, input_size: 9
     - Generate data: python scripts/generate_data.py large --basic
     - Train: python scripts/train_nn.py --basic
     
  3. Auto-configuration:
     - The training script will automatically update input_size based on goal_aware setting
     - No need to manually edit input_size when switching modes
     
  ðŸ“Š PERFORMANCE COMPARISON:
  
  | Mode | Features | Accuracy | Use Case |
  |------|----------|----------|----------|
  | Goal-Aware | 11 | 80-85% | Compass-like navigation |
  | Basic | 9 | 70-75% | Local obstacle avoidance |
  
  ðŸŽ¯ RECOMMENDATIONS:
  
  - Use Goal-Aware mode for optimal performance (compass-like navigation)
  - Use Basic mode for comparison or resource-constrained scenarios
  - Goal-aware mode provides direction awareness like animal navigation

